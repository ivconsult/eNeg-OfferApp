//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace citPOINT.OfferApp.Data.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using citPOINT.OfferApp.Data.Web.PrefAppService;
    
    
    /// <summary>
    /// The 'ConversationOfferSetting' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.OfferApp.Data.Web")]
    public sealed partial class ConversationOfferSetting : Entity
    {
        
        private Nullable<int> _baseOfferTypeID;
        
        private Guid _conversationID;
        
        private Guid _conversationOfferSettingID;
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private EntityRef<NegotiationOfferSetting> _negotiationOfferSetting;
        
        private Nullable<Guid> _negotiationOfferSettingID;
        
        private Nullable<int> _targetTypeID;
        
        private Nullable<decimal> _targetValue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBaseOfferTypeIDChanging(Nullable<int> value);
        partial void OnBaseOfferTypeIDChanged();
        partial void OnConversationIDChanging(Guid value);
        partial void OnConversationIDChanged();
        partial void OnConversationOfferSettingIDChanging(Guid value);
        partial void OnConversationOfferSettingIDChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnNegotiationOfferSettingIDChanging(Nullable<Guid> value);
        partial void OnNegotiationOfferSettingIDChanged();
        partial void OnTargetTypeIDChanging(Nullable<int> value);
        partial void OnTargetTypeIDChanged();
        partial void OnTargetValueChanging(Nullable<decimal> value);
        partial void OnTargetValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversationOfferSetting"/> class.
        /// </summary>
        public ConversationOfferSetting()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BaseOfferTypeID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> BaseOfferTypeID
        {
            get
            {
                return this._baseOfferTypeID;
            }
            set
            {
                if ((this._baseOfferTypeID != value))
                {
                    this.OnBaseOfferTypeIDChanging(value);
                    this.RaiseDataMemberChanging("BaseOfferTypeID");
                    this.ValidateProperty("BaseOfferTypeID", value);
                    this._baseOfferTypeID = value;
                    this.RaiseDataMemberChanged("BaseOfferTypeID");
                    this.OnBaseOfferTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationID' value.
        /// </summary>
        [DataMember()]
        public Guid ConversationID
        {
            get
            {
                return this._conversationID;
            }
            set
            {
                if ((this._conversationID != value))
                {
                    this.OnConversationIDChanging(value);
                    this.RaiseDataMemberChanging("ConversationID");
                    this.ValidateProperty("ConversationID", value);
                    this._conversationID = value;
                    this.RaiseDataMemberChanged("ConversationID");
                    this.OnConversationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConversationOfferSettingID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid ConversationOfferSettingID
        {
            get
            {
                return this._conversationOfferSettingID;
            }
            set
            {
                if ((this._conversationOfferSettingID != value))
                {
                    this.OnConversationOfferSettingIDChanging(value);
                    this.ValidateProperty("ConversationOfferSettingID", value);
                    this._conversationOfferSettingID = value;
                    this.RaisePropertyChanged("ConversationOfferSettingID");
                    this.OnConversationOfferSettingIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="NegotiationOfferSetting"/> entity.
        /// </summary>
        [Association("NegotiationOfferSetting_ConversationOfferSetting", "NegotiationOfferSettingID", "NegotiationOfferSettingID", IsForeignKey=true)]
        [XmlIgnore()]
        public NegotiationOfferSetting NegotiationOfferSetting
        {
            get
            {
                if ((this._negotiationOfferSetting == null))
                {
                    this._negotiationOfferSetting = new EntityRef<NegotiationOfferSetting>(this, "NegotiationOfferSetting", this.FilterNegotiationOfferSetting);
                }
                return this._negotiationOfferSetting.Entity;
            }
            set
            {
                NegotiationOfferSetting previous = this.NegotiationOfferSetting;
                if ((previous != value))
                {
                    this.ValidateProperty("NegotiationOfferSetting", value);
                    if ((previous != null))
                    {
                        this._negotiationOfferSetting.Entity = null;
                        previous.ConversationOfferSettings.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.NegotiationOfferSettingID = value.NegotiationOfferSettingID;
                    }
                    else
                    {
                        this.NegotiationOfferSettingID = default(Nullable<Guid>);
                    }
                    this._negotiationOfferSetting.Entity = value;
                    if ((value != null))
                    {
                        value.ConversationOfferSettings.Add(this);
                    }
                    this.RaisePropertyChanged("NegotiationOfferSetting");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationOfferSettingID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> NegotiationOfferSettingID
        {
            get
            {
                return this._negotiationOfferSettingID;
            }
            set
            {
                if ((this._negotiationOfferSettingID != value))
                {
                    this.OnNegotiationOfferSettingIDChanging(value);
                    this.RaiseDataMemberChanging("NegotiationOfferSettingID");
                    this.ValidateProperty("NegotiationOfferSettingID", value);
                    this._negotiationOfferSettingID = value;
                    this.RaiseDataMemberChanged("NegotiationOfferSettingID");
                    this.OnNegotiationOfferSettingIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TargetTypeID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> TargetTypeID
        {
            get
            {
                return this._targetTypeID;
            }
            set
            {
                if ((this._targetTypeID != value))
                {
                    this.OnTargetTypeIDChanging(value);
                    this.RaiseDataMemberChanging("TargetTypeID");
                    this.ValidateProperty("TargetTypeID", value);
                    this._targetTypeID = value;
                    this.RaiseDataMemberChanged("TargetTypeID");
                    this.OnTargetTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TargetValue' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TargetValue
        {
            get
            {
                return this._targetValue;
            }
            set
            {
                if ((this._targetValue != value))
                {
                    this.OnTargetValueChanging(value);
                    this.RaiseDataMemberChanging("TargetValue");
                    this.ValidateProperty("TargetValue", value);
                    this._targetValue = value;
                    this.RaiseDataMemberChanged("TargetValue");
                    this.OnTargetValueChanged();
                }
            }
        }
        
        private bool FilterNegotiationOfferSetting(NegotiationOfferSetting entity)
        {
            return (entity.NegotiationOfferSettingID == this.NegotiationOfferSettingID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._conversationOfferSettingID;
        }
    }
    
    /// <summary>
    /// The 'ExpectedTarget' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.OfferApp.Data.Web")]
    public sealed partial class ExpectedTarget : Entity
    {
        
        private int _id;
        
        private Status _status;
        
        private decimal _target;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnStatusChanging(Status value);
        partial void OnStatusChanged();
        partial void OnTargetChanging(decimal value);
        partial void OnTargetChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpectedTarget"/> class.
        /// </summary>
        public ExpectedTarget()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public Status Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Target' value.
        /// </summary>
        [DataMember()]
        public decimal Target
        {
            get
            {
                return this._target;
            }
            set
            {
                if ((this._target != value))
                {
                    this.OnTargetChanging(value);
                    this.RaiseDataMemberChanging("Target");
                    this.ValidateProperty("Target", value);
                    this._target = value;
                    this.RaiseDataMemberChanged("Target");
                    this.OnTargetChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'NegotiationOfferSetting' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.OfferApp.Data.Web")]
    public sealed partial class NegotiationOfferSetting : Entity
    {
        
        private Nullable<int> _baseOfferTypeID;
        
        private EntityCollection<ConversationOfferSetting> _conversationOfferSettings;
        
        private Nullable<bool> _deleted;
        
        private Nullable<Guid> _deletedBy;
        
        private Nullable<DateTime> _deletedOn;
        
        private Guid _negotiationID;
        
        private Guid _negotiationOfferSettingID;
        
        private Nullable<int> _targetTypeID;
        
        private Nullable<decimal> _targetValue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBaseOfferTypeIDChanging(Nullable<int> value);
        partial void OnBaseOfferTypeIDChanged();
        partial void OnDeletedChanging(Nullable<bool> value);
        partial void OnDeletedChanged();
        partial void OnDeletedByChanging(Nullable<Guid> value);
        partial void OnDeletedByChanged();
        partial void OnDeletedOnChanging(Nullable<DateTime> value);
        partial void OnDeletedOnChanged();
        partial void OnNegotiationIDChanging(Guid value);
        partial void OnNegotiationIDChanged();
        partial void OnNegotiationOfferSettingIDChanging(Guid value);
        partial void OnNegotiationOfferSettingIDChanged();
        partial void OnTargetTypeIDChanging(Nullable<int> value);
        partial void OnTargetTypeIDChanged();
        partial void OnTargetValueChanging(Nullable<decimal> value);
        partial void OnTargetValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="NegotiationOfferSetting"/> class.
        /// </summary>
        public NegotiationOfferSetting()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BaseOfferTypeID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> BaseOfferTypeID
        {
            get
            {
                return this._baseOfferTypeID;
            }
            set
            {
                if ((this._baseOfferTypeID != value))
                {
                    this.OnBaseOfferTypeIDChanging(value);
                    this.RaiseDataMemberChanging("BaseOfferTypeID");
                    this.ValidateProperty("BaseOfferTypeID", value);
                    this._baseOfferTypeID = value;
                    this.RaiseDataMemberChanged("BaseOfferTypeID");
                    this.OnBaseOfferTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ConversationOfferSetting"/> entities.
        /// </summary>
        [Association("NegotiationOfferSetting_ConversationOfferSetting", "NegotiationOfferSettingID", "NegotiationOfferSettingID")]
        [XmlIgnore()]
        public EntityCollection<ConversationOfferSetting> ConversationOfferSettings
        {
            get
            {
                if ((this._conversationOfferSettings == null))
                {
                    this._conversationOfferSettings = new EntityCollection<ConversationOfferSetting>(this, "ConversationOfferSettings", this.FilterConversationOfferSettings, this.AttachConversationOfferSettings, this.DetachConversationOfferSettings);
                }
                return this._conversationOfferSettings;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Deleted' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if ((this._deleted != value))
                {
                    this.OnDeletedChanging(value);
                    this.RaiseDataMemberChanging("Deleted");
                    this.ValidateProperty("Deleted", value);
                    this._deleted = value;
                    this.RaiseDataMemberChanged("Deleted");
                    this.OnDeletedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedBy' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> DeletedBy
        {
            get
            {
                return this._deletedBy;
            }
            set
            {
                if ((this._deletedBy != value))
                {
                    this.OnDeletedByChanging(value);
                    this.RaiseDataMemberChanging("DeletedBy");
                    this.ValidateProperty("DeletedBy", value);
                    this._deletedBy = value;
                    this.RaiseDataMemberChanged("DeletedBy");
                    this.OnDeletedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeletedOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DeletedOn
        {
            get
            {
                return this._deletedOn;
            }
            set
            {
                if ((this._deletedOn != value))
                {
                    this.OnDeletedOnChanging(value);
                    this.RaiseDataMemberChanging("DeletedOn");
                    this.ValidateProperty("DeletedOn", value);
                    this._deletedOn = value;
                    this.RaiseDataMemberChanged("DeletedOn");
                    this.OnDeletedOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationID' value.
        /// </summary>
        [DataMember()]
        public Guid NegotiationID
        {
            get
            {
                return this._negotiationID;
            }
            set
            {
                if ((this._negotiationID != value))
                {
                    this.OnNegotiationIDChanging(value);
                    this.RaiseDataMemberChanging("NegotiationID");
                    this.ValidateProperty("NegotiationID", value);
                    this._negotiationID = value;
                    this.RaiseDataMemberChanged("NegotiationID");
                    this.OnNegotiationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NegotiationOfferSettingID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid NegotiationOfferSettingID
        {
            get
            {
                return this._negotiationOfferSettingID;
            }
            set
            {
                if ((this._negotiationOfferSettingID != value))
                {
                    this.OnNegotiationOfferSettingIDChanging(value);
                    this.ValidateProperty("NegotiationOfferSettingID", value);
                    this._negotiationOfferSettingID = value;
                    this.RaisePropertyChanged("NegotiationOfferSettingID");
                    this.OnNegotiationOfferSettingIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TargetTypeID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> TargetTypeID
        {
            get
            {
                return this._targetTypeID;
            }
            set
            {
                if ((this._targetTypeID != value))
                {
                    this.OnTargetTypeIDChanging(value);
                    this.RaiseDataMemberChanging("TargetTypeID");
                    this.ValidateProperty("TargetTypeID", value);
                    this._targetTypeID = value;
                    this.RaiseDataMemberChanged("TargetTypeID");
                    this.OnTargetTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TargetValue' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TargetValue
        {
            get
            {
                return this._targetValue;
            }
            set
            {
                if ((this._targetValue != value))
                {
                    this.OnTargetValueChanging(value);
                    this.RaiseDataMemberChanging("TargetValue");
                    this.ValidateProperty("TargetValue", value);
                    this._targetValue = value;
                    this.RaiseDataMemberChanged("TargetValue");
                    this.OnTargetValueChanged();
                }
            }
        }
        
        private void AttachConversationOfferSettings(ConversationOfferSetting entity)
        {
            entity.NegotiationOfferSetting = this;
        }
        
        private void DetachConversationOfferSettings(ConversationOfferSetting entity)
        {
            entity.NegotiationOfferSetting = null;
        }
        
        private bool FilterConversationOfferSettings(ConversationOfferSetting entity)
        {
            return (entity.NegotiationOfferSettingID == this.NegotiationOfferSettingID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._negotiationOfferSettingID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'OfferAppService' domain service.
    /// </summary>
    public sealed partial class OfferAppContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferAppContext"/> class.
        /// </summary>
        public OfferAppContext() : 
                this(new WebDomainClient<IOfferAppServiceContract>(new Uri("citPOINT-OfferApp-Data-Web-OfferAppService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferAppContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The OfferAppService service URI.</param>
        public OfferAppContext(Uri serviceUri) : 
                this(new WebDomainClient<IOfferAppServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferAppContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public OfferAppContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ConversationOfferSetting"/> entities that have been loaded into this <see cref="OfferAppContext"/> instance.
        /// </summary>
        public EntitySet<ConversationOfferSetting> ConversationOfferSettings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ConversationOfferSetting>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="OfferDetails"/> entities that have been loaded into this <see cref="OfferAppContext"/> instance.
        /// </summary>
        public EntitySet<OfferDetails> OfferDetails
        {
            get
            {
                return base.EntityContainer.GetEntitySet<OfferDetails>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="NegotiationOfferSetting"/> entities that have been loaded into this <see cref="OfferAppContext"/> instance.
        /// </summary>
        public EntitySet<NegotiationOfferSetting> NegotiationOfferSettings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<NegotiationOfferSetting>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ExpectedTarget"/> entities that have been loaded into this <see cref="OfferAppContext"/> instance.
        /// </summary>
        public EntitySet<ExpectedTarget> ExpectedTargets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ExpectedTarget>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ConversationOfferSetting"/> entities using the 'GetConversationOfferSettings' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ConversationOfferSetting"/> entities.</returns>
        public EntityQuery<ConversationOfferSetting> GetConversationOfferSettingsQuery()
        {
            this.ValidateMethod("GetConversationOfferSettingsQuery", null);
            return base.CreateQuery<ConversationOfferSetting>("GetConversationOfferSettings", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OfferDetails"/> entities using the 'GetGeneratedOfferForConversation' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of the query.</param>
        /// <param name="target">The value for the 'target' parameter of the query.</param>
        /// <param name="offerType">The value for the 'offerType' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OfferDetails"/> entities.</returns>
        public EntityQuery<OfferDetails> GetGeneratedOfferForConversationQuery(Guid negotiationID, Guid conversationID, decimal target, OfferType offerType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("target", target);
            parameters.Add("offerType", offerType);
            this.ValidateMethod("GetGeneratedOfferForConversationQuery", parameters);
            return base.CreateQuery<OfferDetails>("GetGeneratedOfferForConversation", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OfferDetails"/> entities using the 'GetGeneratedOfferForNegotiation' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <param name="target">The value for the 'target' parameter of the query.</param>
        /// <param name="offerType">The value for the 'offerType' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OfferDetails"/> entities.</returns>
        public EntityQuery<OfferDetails> GetGeneratedOfferForNegotiationQuery(Guid negotiationID, decimal target, OfferType offerType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            parameters.Add("target", target);
            parameters.Add("offerType", offerType);
            this.ValidateMethod("GetGeneratedOfferForNegotiationQuery", parameters);
            return base.CreateQuery<OfferDetails>("GetGeneratedOfferForNegotiation", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="NegotiationOfferSetting"/> entities using the 'GetNegotiationOfferSettings' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="NegotiationOfferSetting"/> entities.</returns>
        public EntityQuery<NegotiationOfferSetting> GetNegotiationOfferSettingsQuery()
        {
            this.ValidateMethod("GetNegotiationOfferSettingsQuery", null);
            return base.CreateQuery<NegotiationOfferSetting>("GetNegotiationOfferSettings", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ExpectedTarget"/> entities using the 'GetNextExpectedTargetForConversation' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <param name="conversationID">The value for the 'conversationID' parameter of the query.</param>
        /// <param name="offerType">The value for the 'offerType' parameter of the query.</param>
        /// <param name="maxPercentage">The value for the 'maxPercentage' parameter of the query.</param>
        /// <param name="currentDate">The value for the 'currentDate' parameter of the query.</param>
        /// <param name="targetType">The value for the 'targetType' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ExpectedTarget"/> entities.</returns>
        public EntityQuery<ExpectedTarget> GetNextExpectedTargetForConversationQuery(Guid negotiationID, Guid conversationID, OfferType offerType, decimal maxPercentage, DateTime currentDate, TargetTypeOptions targetType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            parameters.Add("conversationID", conversationID);
            parameters.Add("offerType", offerType);
            parameters.Add("maxPercentage", maxPercentage);
            parameters.Add("currentDate", currentDate);
            parameters.Add("targetType", targetType);
            this.ValidateMethod("GetNextExpectedTargetForConversationQuery", parameters);
            return base.CreateQuery<ExpectedTarget>("GetNextExpectedTargetForConversation", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ExpectedTarget"/> entities using the 'GetNextExpectedTargetForNegotiation' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <param name="offerType">The value for the 'offerType' parameter of the query.</param>
        /// <param name="maxPercentage">The value for the 'maxPercentage' parameter of the query.</param>
        /// <param name="currentDate">The value for the 'currentDate' parameter of the query.</param>
        /// <param name="targetType">The value for the 'targetType' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ExpectedTarget"/> entities.</returns>
        public EntityQuery<ExpectedTarget> GetNextExpectedTargetForNegotiationQuery(Guid negotiationID, OfferType offerType, decimal maxPercentage, DateTime currentDate, TargetTypeOptions targetType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            parameters.Add("offerType", offerType);
            parameters.Add("maxPercentage", maxPercentage);
            parameters.Add("currentDate", currentDate);
            parameters.Add("targetType", targetType);
            this.ValidateMethod("GetNextExpectedTargetForNegotiationQuery", parameters);
            return base.CreateQuery<ExpectedTarget>("GetNextExpectedTargetForNegotiation", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="OfferDetails"/> entities using the 'GetPreferenceSet' query.
        /// </summary>
        /// <param name="negotiationID">The value for the 'negotiationID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="OfferDetails"/> entities.</returns>
        public EntityQuery<OfferDetails> GetPreferenceSetQuery(Guid negotiationID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("negotiationID", negotiationID);
            this.ValidateMethod("GetPreferenceSetQuery", parameters);
            return base.CreateQuery<OfferDetails>("GetPreferenceSet", parameters, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new OfferAppContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'OfferAppService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IOfferAppServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetConversationOfferSettings' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OfferAppService/GetConversationOfferSettingsDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OfferAppService/GetConversationOfferSettings", ReplyAction="http://tempuri.org/OfferAppService/GetConversationOfferSettingsResponse")]
            [WebGet()]
            IAsyncResult BeginGetConversationOfferSettings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetConversationOfferSettings'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetConversationOfferSettings'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetConversationOfferSettings' operation.</returns>
            QueryResult<ConversationOfferSetting> EndGetConversationOfferSettings(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetGeneratedOfferForConversation' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="target">The value for the 'target' parameter of this action.</param>
            /// <param name="offerType">The value for the 'offerType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OfferAppService/GetGeneratedOfferForConversationDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OfferAppService/GetGeneratedOfferForConversation", ReplyAction="http://tempuri.org/OfferAppService/GetGeneratedOfferForConversationResponse")]
            [WebGet()]
            IAsyncResult BeginGetGeneratedOfferForConversation(Guid negotiationID, Guid conversationID, decimal target, OfferType offerType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetGeneratedOfferForConversation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetGeneratedOfferForConversation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetGeneratedOfferForConversation' operation.</returns>
            QueryResult<OfferDetails> EndGetGeneratedOfferForConversation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetGeneratedOfferForNegotiation' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="target">The value for the 'target' parameter of this action.</param>
            /// <param name="offerType">The value for the 'offerType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OfferAppService/GetGeneratedOfferForNegotiationDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OfferAppService/GetGeneratedOfferForNegotiation", ReplyAction="http://tempuri.org/OfferAppService/GetGeneratedOfferForNegotiationResponse")]
            [WebGet()]
            IAsyncResult BeginGetGeneratedOfferForNegotiation(Guid negotiationID, decimal target, OfferType offerType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetGeneratedOfferForNegotiation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetGeneratedOfferForNegotiation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetGeneratedOfferForNegotiation' operation.</returns>
            QueryResult<OfferDetails> EndGetGeneratedOfferForNegotiation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNegotiationOfferSettings' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OfferAppService/GetNegotiationOfferSettingsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OfferAppService/GetNegotiationOfferSettings", ReplyAction="http://tempuri.org/OfferAppService/GetNegotiationOfferSettingsResponse")]
            [WebGet()]
            IAsyncResult BeginGetNegotiationOfferSettings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNegotiationOfferSettings'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNegotiationOfferSettings'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNegotiationOfferSettings' operation.</returns>
            QueryResult<NegotiationOfferSetting> EndGetNegotiationOfferSettings(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNextExpectedTargetForConversation' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="conversationID">The value for the 'conversationID' parameter of this action.</param>
            /// <param name="offerType">The value for the 'offerType' parameter of this action.</param>
            /// <param name="maxPercentage">The value for the 'maxPercentage' parameter of this action.</param>
            /// <param name="currentDate">The value for the 'currentDate' parameter of this action.</param>
            /// <param name="targetType">The value for the 'targetType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OfferAppService/GetNextExpectedTargetForConversationDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OfferAppService/GetNextExpectedTargetForConversation", ReplyAction="http://tempuri.org/OfferAppService/GetNextExpectedTargetForConversationResponse")]
            [WebGet()]
            IAsyncResult BeginGetNextExpectedTargetForConversation(Guid negotiationID, Guid conversationID, OfferType offerType, decimal maxPercentage, DateTime currentDate, TargetTypeOptions targetType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNextExpectedTargetForConversation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNextExpectedTargetForConversation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNextExpectedTargetForConversation' operation.</returns>
            QueryResult<ExpectedTarget> EndGetNextExpectedTargetForConversation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNextExpectedTargetForNegotiation' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="offerType">The value for the 'offerType' parameter of this action.</param>
            /// <param name="maxPercentage">The value for the 'maxPercentage' parameter of this action.</param>
            /// <param name="currentDate">The value for the 'currentDate' parameter of this action.</param>
            /// <param name="targetType">The value for the 'targetType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OfferAppService/GetNextExpectedTargetForNegotiationDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OfferAppService/GetNextExpectedTargetForNegotiation", ReplyAction="http://tempuri.org/OfferAppService/GetNextExpectedTargetForNegotiationResponse")]
            [WebGet()]
            IAsyncResult BeginGetNextExpectedTargetForNegotiation(Guid negotiationID, OfferType offerType, decimal maxPercentage, DateTime currentDate, TargetTypeOptions targetType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNextExpectedTargetForNegotiation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNextExpectedTargetForNegotiation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetNextExpectedTargetForNegotiation' operation.</returns>
            QueryResult<ExpectedTarget> EndGetNextExpectedTargetForNegotiation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPreferenceSet' operation.
            /// </summary>
            /// <param name="negotiationID">The value for the 'negotiationID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OfferAppService/GetPreferenceSetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OfferAppService/GetPreferenceSet", ReplyAction="http://tempuri.org/OfferAppService/GetPreferenceSetResponse")]
            [WebGet()]
            IAsyncResult BeginGetPreferenceSet(Guid negotiationID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPreferenceSet'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPreferenceSet'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPreferenceSet' operation.</returns>
            QueryResult<OfferDetails> EndGetPreferenceSet(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OfferAppService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OfferAppService/SubmitChanges", ReplyAction="http://tempuri.org/OfferAppService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class OfferAppContextEntityContainer : EntityContainer
        {
            
            public OfferAppContextEntityContainer()
            {
                this.CreateEntitySet<ConversationOfferSetting>(EntitySetOperations.All);
                this.CreateEntitySet<ExpectedTarget>(EntitySetOperations.None);
                this.CreateEntitySet<NegotiationOfferSetting>(EntitySetOperations.All);
                this.CreateEntitySet<OfferDetails>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'OfferDetails' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.OfferApp.Data.Web")]
    public sealed partial class OfferDetails : Entity
    {
        
        private string _issueName;
        
        private decimal _maxPercentage;
        
        private int _rank;
        
        private string _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIssueNameChanging(string value);
        partial void OnIssueNameChanged();
        partial void OnMaxPercentageChanging(decimal value);
        partial void OnMaxPercentageChanged();
        partial void OnRankChanging(int value);
        partial void OnRankChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferDetails"/> class.
        /// </summary>
        public OfferDetails()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IssueName' value.
        /// </summary>
        [DataMember()]
        public string IssueName
        {
            get
            {
                return this._issueName;
            }
            set
            {
                if ((this._issueName != value))
                {
                    this.OnIssueNameChanging(value);
                    this.RaiseDataMemberChanging("IssueName");
                    this.ValidateProperty("IssueName", value);
                    this._issueName = value;
                    this.RaiseDataMemberChanged("IssueName");
                    this.OnIssueNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaxPercentage' value.
        /// </summary>
        [DataMember()]
        public decimal MaxPercentage
        {
            get
            {
                return this._maxPercentage;
            }
            set
            {
                if ((this._maxPercentage != value))
                {
                    this.OnMaxPercentageChanging(value);
                    this.RaiseDataMemberChanging("MaxPercentage");
                    this.ValidateProperty("MaxPercentage", value);
                    this._maxPercentage = value;
                    this.RaiseDataMemberChanged("MaxPercentage");
                    this.OnMaxPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rank' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Rank
        {
            get
            {
                return this._rank;
            }
            set
            {
                if ((this._rank != value))
                {
                    this.OnRankChanging(value);
                    this.ValidateProperty("Rank", value);
                    this._rank = value;
                    this.RaisePropertyChanged("Rank");
                    this.OnRankChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._rank;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'SessionService' domain service.
    /// </summary>
    public sealed partial class SessionContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class.
        /// </summary>
        public SessionContext() : 
                this(new WebDomainClient<ISessionServiceContract>(new Uri("citPOINT-OfferApp-Data-Web-SessionService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SessionService service URI.</param>
        public SessionContext(Uri serviceUri) : 
                this(new WebDomainClient<ISessionServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public SessionContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetSessionValue(string[] sessionKey, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            this.ValidateMethod("GetSessionValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSessionValue", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetSessionValue(string[] sessionKey)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            this.ValidateMethod("GetSessionValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetSessionValue", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionValue(string[] sessionKey, string[] sessionValue, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            parameters.Add("sessionValue", sessionValue);
            this.ValidateMethod("SetSessionValue", parameters);
            return this.InvokeOperation("SetSessionValue", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionValue' method of the domain service.
        /// </summary>
        /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
        /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionValue(string[] sessionKey, string[] sessionValue)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionKey", sessionKey);
            parameters.Add("sessionValue", sessionValue);
            this.ValidateMethod("SetSessionValue", parameters);
            return this.InvokeOperation("SetSessionValue", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SessionContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SessionService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface ISessionServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSessionValue' operation.
            /// </summary>
            /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/GetSessionValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/GetSessionValue", ReplyAction="http://tempuri.org/SessionService/GetSessionValueResponse")]
            IAsyncResult BeginGetSessionValue(string[] sessionKey, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSessionValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSessionValue'.</param>
            /// <returns>The 'String' returned from the 'GetSessionValue' operation.</returns>
            string EndGetSessionValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetSessionValue' operation.
            /// </summary>
            /// <param name="sessionKey">The value for the 'sessionKey' parameter of this action.</param>
            /// <param name="sessionValue">The value for the 'sessionValue' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/SetSessionValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/SetSessionValue", ReplyAction="http://tempuri.org/SessionService/SetSessionValueResponse")]
            IAsyncResult BeginSetSessionValue(string[] sessionKey, string[] sessionValue, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetSessionValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetSessionValue'.</param>
            void EndSetSessionValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SessionService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SessionService/SubmitChanges", ReplyAction="http://tempuri.org/SessionService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SessionContextEntityContainer : EntityContainer
        {
            
            public SessionContextEntityContainer()
            {
            }
        }
    }
    
    public enum Status
    {
        
        Success = 0,
        
        Failed = 1,
        
        DateOutOfPeriod = 2,
        
        NoSettings = 3,
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.OfferApp.Data.Web")]
    public enum TargetTypeOptions
    {
        
        [EnumMember()]
        StrategyApp = 1,
        
        [EnumMember()]
        PrefApp = 2,
        
        [EnumMember()]
        UserDefined = 3,
    }
}
namespace citPOINT.OfferApp.Data.Web.PrefAppService
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/citPOINT.PrefApp.Data.Web.Complete", Name="OfferType")]
    public enum OfferType
    {
        
        [EnumMember()]
        Own = 1,
        
        [EnumMember()]
        Counterpart = 2,
        
        [EnumMember()]
        Mixed = 3,
    }
}
